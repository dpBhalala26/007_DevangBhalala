# -*- coding: utf-8 -*-
"""4-linear-regression-tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pcpPN6HphHl0qIMl8M3c8xC6rloXxpJo

#Exercise 2:
 Try Linear regression on same prediction data using Tensorflow
"""

import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt

import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.layers.experimental import preprocessing

# Input (temp, rainfall, humidity)
inputs = np.array([[73, 67, 43], [91, 88, 64], [87, 134, 58], [102, 43, 37], [69, 96, 70], [73, 67, 43], [91, 88, 64], [87, 134, 58], [102, 43, 37], [69, 96, 70], [73, 67, 43], [91, 88, 64], [87, 134, 58], [102, 43, 37], [69, 96, 70]], dtype='float32')
# Targets (apples)
targets = np.array([[56], [81], [119], [22], [103], 
                    [56], [81], [119], [22], [103], 
                    [56], [81], [119], [22], [103]], dtype='float32')

df_inputs = pd.DataFrame(inputs, columns = ['temp','rainfall','humidity'])
x_train = df_inputs[:10]
x_test = df_inputs[10:] 

df_targets = pd.DataFrame(targets, columns = ['apples'])
y_train =  df_targets[:10]
y_test = df_targets[10:]

x_train

x_test

y_train

y_test

from sklearn.preprocessing import Normalizer
import sklearn.preprocessing

normalizer = preprocessing.Normalization(axis = -1)
normalizer.adapt(np.array(x_train))

lin_model = tf.keras.Sequential([
    normalizer,
    layers.Dense(units = 1)
])

lin_model.predict(x_train[:9])

lin_model.compile(
    optimizer=tf.optimizers.Adam(learning_rate = 0.2),
    loss='mean_absolute_error')

lin_model.fit(
    x_train, y_train, 
    epochs = 2000,  
    verbose=0,
    validation_split = 0.3) # validation results on 30% of data

res = {}
res['lin_model'] = lin_model.evaluate(x_test, y_test, verbose = 0)
res['lin_model']

y = lin_model.predict(x_test['rainfall'])
y

def plot_linear_reg(x, y):
  plt.scatter(x_train['rainfall'], y_train['apples'], label = 'Data')
  plt.plot(x, y, color='r', label = 'Predictions')
  plt.xlabel('Rainfall')
  plt.ylabel('Apples')
  plt.legend()

plot_linear_reg(x_test['rainfall'], y)